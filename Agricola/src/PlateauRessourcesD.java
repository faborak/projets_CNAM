import java.awt.*;/*******************************************************************/** Role du fichier   : Dessiner mathematiquement l'objet PlateauRessources/** Ateur             : Fabrice Lecomte        					/** Date de creation  : 29/04/2014  /**     Modifications : 05/06/2014 Methode GetRessource devenue universelle/**       				Traite toutes les ressources par un argument			/** 					Facilite le debug et la maintenance/*********************************************************************/  public class PlateauRessourcesD extends Canvas {	private static final long serialVersionUID = 1L;public final static  Color vert = new Color( 0, 255, 0 );public final static  Color vert1 = new Color( 0, 150, 0 );private static Color marronclair = new Color( 95, 60, 0 );//références croiséespublic Agricola jeu;public PlateauJeuD PJeD;public PlateauJoueurD PJoD;public PlateauRessourcesD PReD;private PlateauRessources PRe;private int Bois = 0;private int Argile = 0;private int Roseau = 0;private int Pierre = 0;private int Cereale = 0;private int Legume = 0;private int Mouton = 0;private int Sanglier = 0;private int Boeuf = 0;public int PointNourriture = 2; private int PointMendicite = 0; public int attente ;private boolean PlateauClicRe[] = new boolean[10];public PlateauRessourcesD(Agricola j) {jeu = j;	setBackground(marronclair);setForeground(vert1);setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));PRe = new PlateauRessources(Bois, Argile, Roseau, Pierre, Cereale, Legume, Mouton, Sanglier, Boeuf, PointNourriture, PointMendicite);}public void paint (Graphics g) {PRe.dessine(g);}public void nouveau () {	PRe = new PlateauRessources(Bois, Argile, Roseau, Pierre, Cereale, Legume, Mouton, Sanglier, Boeuf, PointNourriture, PointMendicite);		repaint();}// En attente d'un clic de joueurpublic void SetAttente(int a){	attente = a;}// methode appelee par PlateauRessource, aiguillee en fonction de la variable attentepublic void RecevoirClicPRe(boolean[] c){	PlateauClicRe	= c ;	switch (attente){	case 1 : PJoD.ConstructionPiece_1(PlateauClicRe);	break;	case 2 : PJoD.Semailles_1(PlateauClicRe);	break;	case 3 : PJoD.Renovations_1(PlateauClicRe);	break;	}}//methodes generiques de gestion des ressourcespublic void AddRessource(int type, int quantite) {	switch(type){	case 1 : Bois = Bois + quantite;		break;	case 2 : Argile = Argile + quantite;		break;	case 3 : Roseau = Roseau + quantite;		break;	case 4 : Pierre = Pierre + quantite;		break;	case 5 : Cereale = Cereale + quantite;		break;	case 6 : Legume = Legume + quantite;		break;	case 7 : Mouton = Mouton + quantite;		break;	case 8 : Sanglier = Sanglier + quantite;		break;	case 9 : Boeuf = Boeuf + quantite;		break;	case 10 : PointNourriture = PointNourriture + quantite;		break;	case 11 : PointMendicite = PointMendicite + quantite;		break;	}}// Methode generique de renvoi des ressourcespublic int GetRessource(int type) {	switch(type){	case 1 : return Bois ;	case 2 : return Argile ;	case 3 : return Roseau;	case 4 : return Pierre;	case 5 : return Cereale;	case 6 : return Legume;	case 7 : return Mouton;	case 8 : return Sanglier;	case 9 : return Boeuf;	case 10 : return PointNourriture;	default : return 0;	}}// methode generique de soustraction des ressourcespublic void RemoveRessource(int type, int quantite) {switch(type){case 1 : if (Bois >= quantite) {Bois = Bois - quantite;}	break;case 2 : if (Argile >= quantite) {Argile = Argile - quantite;}	break;case 3 : if (Roseau >= quantite) {Roseau = Roseau - quantite;}	break;case 4 : if (Pierre >= quantite) {Pierre = Pierre - quantite;}	break;case 5 : if (Cereale >= quantite) {Cereale = Cereale - quantite;}	break;case 6 : if (Legume >= quantite) {Legume = Legume - quantite;}	break;case 7 : if (Mouton >= quantite) {Mouton = Mouton - quantite;}	break;case 8 : if (Sanglier >= quantite) {Sanglier = Sanglier - quantite;}	break;case 9 : if (Boeuf >= quantite) {Boeuf = Boeuf - quantite;}	break;case 10 : if (PointNourriture >= quantite) {PointNourriture = PointNourriture - quantite;}	break;}}}