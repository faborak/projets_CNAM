import java.awt.*;public class PlateauJoueurD extends Canvas {	//références croiséespublic Agricola jeu;public PlateauJeuD PJeD;public PlateauJoueurD PJoD;public PlateauRessourcesD PReD;public PionJoueur PJ;public AideD Ai;private PlateauJoueur PJo;private static final long serialVersionUID = 1L;private Color couleur = Color.green;private static Color vertpale = new Color( 200, 255, 200 );private int nbpionstour ;private String TexteAide="";//nombre de champ laboures, rien, cereale ou legume (0, 1 et 2), nombre de ressource en attenteint[][] Champ = new int[1][1];// 1, 2 et 3 Mais en bois, argile et pierre, 4 champ et 5 paturagepublic int Plateau[][]= {{0,0,0,0},						 {0,0,1,1}, // Les deux maison en bois du début du jeu					  	 {0,0,0,0},					 	 {0,0,0,0},					 	 {0,0,0,0},					  	 {0,0,0,0},					 	 {0,0,0,0}};private boolean PlateauClic[][]= new boolean[6][4];private boolean PlateauClicRe[]= new boolean[10]; private boolean PlateauJeuPion[][] = new boolean[6][4];public int Tour = 1;public boolean verrou;public int attente; // définit en public pour pouvoir prolonger certaines actions : clotures, construction, renovation et la remetre a zero depuis PJeDprivate boolean CoupContinu = false;private boolean RenovationCloture = false;public String Animal = "";private int CodeAnimal = 0; //1 mouton, 2 sanglier, 3 boeufpublic PlateauJoueurD(Agricola je, PlateauRessourcesD r, PionJoueur p, AideD a) {jeu = je;PReD = r;PJ = p;Ai = a;setBackground(vertpale);setForeground(couleur);nbpionstour = PJ.GetPionTour();for (int i=0;i<6;i++){	for (int j=0;j<4;j++){		if (Plateau[i][j] == 1||Plateau[i][j] == 2 || Plateau[i][j] == 3){			PlateauJeuPion[i][j] = true;			}		else		{			PlateauJeuPion[i][j] = false;		}	}}PJo = new PlateauJoueur(Plateau, PlateauJeuPion, nbpionstour);}public void paint (Graphics g) {PJo.dessine(g);}public void nouveau () {	int tnbpionstour = PJ.GetPionTour();	for (int i=1;i<6;i++){		for (int j=1;j<4;j++){			if (tnbpionstour > 0 && (Plateau[i][j] == 1 || Plateau[i][j] == 2 || Plateau[i][j] == 3)){				PlateauJeuPion[i][j] = true;					tnbpionstour = tnbpionstour-1;}			else			{				PlateauJeuPion[i][j] = false;			}		}	}	PJo = new PlateauJoueur(Plateau, PlateauJeuPion, nbpionstour);	repaint();}// Renvoie au bon paragraphe quand attente d'un clic sur un plateaupublic void RecevoirClicPJo(boolean c[][]) {	PlateauClic = c;	switch(attente){		case 1 : ConstructionPiece_2();		break ;		case 2 : Labourage_1(1);		break ;		case 3 : cloturessuite();		break ;		case 4 : Semailles_2();		break ;		case 5 : import_animaux_2();		break ;		case 6 : Renovations_2();		break ;		case 9 : Labourage_1(2);		break ;	}	}//Fin des coups continus : Clotures, Construction, Renovationpublic void FinCoupContinu(){	attente = 0;	PReD.SetAttente(0);	CodeAnimal = 0;	Animal = "";	CoupContinu = false;}//La methode NouveauCoup est appelé chaque fois qu'un coup a été jouépublic void NouveauCoup(PlateauJeuD PJeD) { 	this.PJeD = PJeD;	int tPiontour = PJ.GetPionTour();	if (tPiontour ==0 && Tour<15){		Tour = Tour +1;		System.out.println("Tour numéro "+Tour+" commencé");		TexteAide = "Tour numéro "+Tour+" commencé.";		Ai.nouveau(TexteAide);		if (Tour ==5 || Tour ==8 || Tour == 10 || Tour == 12 || Tour == 14){			Recoltes();		}		if (Tour== 15){			Recoltes();			System.out.println("Fin de partie, lancer le calcul du score");			PJeD.verrou = true;			verrou = true;		    Score Scorefinal = new Score(this, PJ, PReD, Ai);		    Scorefinal.calcul();		}		// réinitialisation des pions, repaint() du plateau joueur		for (int i = 0; i < PJ.GetPionTotaux(); i++){			PJ.AddPionTour();}		 	nouveau();		// et remise à zéro de plateau jeu 			    PJeD.NouveauTour(Tour);		}	else 	{		System.out.println("Le tour numéro "+Tour+" continue.");			TexteAide = "Le tour numéro "+Tour+" continue.";	    Ai.nouveau(TexteAide);		nouveau();	}}public void Recoltes(){    TexteAide = "Recoltes passées, les champs semés donnent leur graines, les animaux ont des petits.";    Ai.nouveau(TexteAide);	for (int i = 1; i < 6; i++) {		for (int j = 1; j < 4; j++) {			switch(Plateau[i][j]){			case 6 :  // Ajout d'une cereale				Plateau[i][j] =7;				PReD.AddRessource(5,1);			break;			case 7 : // Ajout d'une cereale				Plateau[i][j] =8;				PReD.AddRessource(5,1);			break;			case 8 : // Ajout d'une cereale				Plateau[i][j] =4;				PReD.AddRessource(5,1);			break;			case 9 : // Ajout d'un legume				Plateau[i][j] =10;				PReD.AddRessource(6,1);			break;			case 10 : // Ajout d'un legume				Plateau[i][j] =4; //la case redevient un champ labouré				PReD.AddRessource(6,1);			break;			case 11 : // 1 mouton				Plateau[i][j] =5;			break;			case 12 : // 2 moutons				Plateau[i][j] =5;			break;			case 13 : // 1 Sanglier				Plateau[i][j] =5;			break;			case 14 : // 2 Sangliers				Plateau[i][j] =5;			break;			case 15 : // 1 Boeuf				Plateau[i][j] =5;			break;			case 16 : // 2 Boeufs				Plateau[i][j] =5;			break;			}		}	}	//Naissance des animaux et répartitions dans les paturages libresint tMouton = PReD.GetRessource(7);int tSanglier = PReD.GetRessource(8);int tBoeuf = PReD.GetRessource(9);int AjoutMouton = tMouton / 2;int AjoutSanglier = tSanglier / 2;int AjoutBoeuf = tBoeuf / 2;PReD.AddRessource(7, AjoutMouton);PReD.AddRessource(8, AjoutSanglier);PReD.AddRessource(9, AjoutBoeuf);tMouton = tMouton + AjoutMouton;tSanglier = tSanglier + AjoutSanglier;tBoeuf = tBoeuf + AjoutBoeuf;for (int i = 1; i < 6; i++) {	for (int j = 1; j < 4; j++) {		while (Plateau[i][j] ==5){			if (tMouton>1){				tMouton = tMouton -2 ;				Plateau[i][j] = 11;			}			if (tMouton==1){				tMouton = tMouton-- ;				Plateau[i][j] = 12;			}			if (tSanglier>1){				tSanglier = tSanglier -2 ;				Plateau[i][j] = 13;			}			if (tSanglier==1){				tSanglier = tSanglier-- ;				Plateau[i][j] = 14;			}			if (tBoeuf>1){				tBoeuf = tBoeuf -2 ;				Plateau[i][j] = 15;			}			if (tBoeuf==1){				tBoeuf = tBoeuf-- ;				Plateau[i][j] = 16;			}		}	}}	// Il faut nourrir la famille : 2 PointNourriture par membre, et un PointMendicite par PointNourriture absent	int tPionTotaux = PJ.GetPionTotaux();	int tNourriture = PReD.GetRessource(10);	tNourriture = tNourriture - (tPionTotaux*2);	if (tNourriture <0) {		int tMendicite =0;		while (tNourriture <0){			tMendicite = tMendicite +1;			tNourriture = tNourriture+1;		}		PReD.AddRessource(11,tMendicite);		}	PReD.PointNourriture = tNourriture;}//Methode de construction des pieces de la maisonpublic void ConstructionPiece(){		if (verrou == false) {	int	Caselibre = 0;		for (int i = 1; i < 6; i++) {			for (int j = 1; j < 4; j++) {				if (Plateau[i][j] == 0) {					Caselibre = Caselibre +1;			}}	}	    if (Caselibre != 0) {		System.out.println("PJoD : Cliquez sur le Bois, l'argile ou la pierre dans le panneau ressources");	    TexteAide = "PJoD : Cliquez sur le Bois, l'argile ou la pierre dans le panneau ressources";	    Ai.nouveau(TexteAide);		// Si case libre, on met un verrou sur PJeD	     verrou = true;    	     PReD.PJoD = this;	     PReD.SetAttente(1);		 PJ.RemovePionTour();  // Attention, le pion est enlevé ici	     nouveau();}	else {		System.out.println("Plus d'emplacement disponible, choisissez une autre action");	    TexteAide = "Plus d'emplacement disponible, choisissez une autre action";	    Ai.nouveau(TexteAide);		 PJ.AddPionTour(); 	     nouveau();}	    }	}		public void ConstructionPiece_1(boolean c[]){	// Il faut verifier s'il y'a assez de ressources pour faire la maison	PlateauClicRe = c;		boolean contruction = true;	int tRoseau = PReD.GetRessource(3);		if (tRoseau <2) {TexteAide = "Pas assez de roseaux : "+tRoseau;Ai.nouveau(TexteAide);}		// mettre un switch / case, le défault permet de gérer les autre clics	if (PlateauClicRe[1]==true){		int tBois = PReD.GetRessource(1);			if (tBois <3) {System.out.println("Pas assez de bois");TexteAide = "Pas assez de bois";Ai.nouveau(TexteAide);		contruction = false;}	}	if (PlateauClicRe[2]==true){		int tArgile = PReD.GetRessource(2);		if (tArgile <3) {System.out.println("Pas assez d'argile");TexteAide = "Pas assez d'argile";Ai.nouveau(TexteAide);		contruction = false;}	}	if (PlateauClicRe[3]==true){		int tPierre = PReD.GetRessource(4);		if (tPierre <3) {System.out.println("Pas assez de pierre");TexteAide = "Pas assez de pierre";Ai.nouveau(TexteAide);		contruction = false;}}			 if (contruction == true){attente = 1; } 		else {		verrou = false;		PJeD.verrou = false;		attente = 0;		PReD.SetAttente(0);		System.out.println("PJoD : pas assez de ressource pour construire, rendre son pion au joueur");		TexteAide = "PJoD : pas assez de ressource pour construire";		Ai.nouveau(TexteAide);		PJeD.PlateauPion[1][2] = false;		PJeD.nouveau();		PJ.AddPionTour();			nouveau();	} 	}		public void ConstructionPiece_2() {		for (int i = 1; i < 6; i++) {		for (int j = 1; j < 4; j++) {			if (PlateauClic[i][j] == true) {				if (PlateauClicRe[1]==true) {Plateau[i][j] = 1;											 PReD.RemoveRessource(1, 5);											 PReD.RemoveRessource(3, 2);											 PReD.nouveau();}				if (PlateauClicRe[2]==true) {Plateau[i][j] = 2;											 PReD.RemoveRessource(2, 5);											 PReD.RemoveRessource(3, 2);											 PReD.nouveau();}				if (PlateauClicRe[4]==true) {Plateau[i][j] = 3; // La pierre est le quatrieme champ de PlateauRessources											 PReD.RemoveRessource(4, 5);											 PReD.RemoveRessource(3, 2);											 PReD.nouveau();}				System.out.println("Construction maison");			    nouveau();			}}	}System.out.println("PJoD : Suite de construction piece");PReD.SetAttente(0);verrou = false; 	// Il faut alors dévérouiller PJeD, a qui on a donné l'adresse de PJeD dans ContructionPiecePJeD.verrou = false;if (CoupContinu == false){	NouveauCoup(PJeD);	CoupContinu = true;}}//Methode de labourage de champ	public void labourage(int x, int y, int c) {  		if (verrou == false) {	int Cas = c;	int	Caselibre = 0;		for (int i = 1; i < 6; i++) {			for (int j = 1; j < 4; j++) {				if (Plateau[i][j] == 0) {					Caselibre = Caselibre +1;			}}}	    if (Caselibre != 0) {		System.out.println("PJoD : Cliquez sur une case libre de votre propriété !");		TexteAide = "Cliquez sur une case libre de votre propriété !";		Ai.nouveau(TexteAide);		// Si case libre	     verrou = true; 	     switch (Cas){	     case 1 : attente = 2; // Labourage normal	     break;	     case 2 : attente = 9; // Labourage de la période 5	     break;	     }	     }	else {		System.out.println("Plus d'emplacement disponible, choisissez une autre action");		TexteAide = "Plus d'emplacement disponible, choisissez une autre action";		Ai.nouveau(TexteAide);		// Rendre son pion au joueur		PJeD.verrou = false;		PJeD.PlateauPion[x][y] = false;		PJeD.nouveau();		PJ.AddPionTour();			nouveau();	}	}	}		public void Labourage_1(int c) {		for (int i = 1; i < 6; i++) {			for (int j = 1; j < 4; j++) {				if (PlateauClic[i][j] == true) {					System.out.println("Valuer Plateau"+i+j);					Plateau[i][j] = 4;				nouveau();				    }			}  		}	System.out.println("PJoD : Votre champ est labouré !");	TexteAide = "Votre champ est labouré !";	Ai.nouveau(TexteAide);	switch (c) {	case 1 : verrou = false;  // Fin de l'action labourage, un pion est enlevé et la partie continue		attente = 0;		PJeD.verrou = false;		NouveauCoup(PJeD);	break;	case 2 : Semailles(2);// Suite de l'action labourage semailles, on passe aux semailles	break;	}	}		//Methode de semaille	public void Semailles(int c){		int Cas = c;		if (verrou == false || c == 2) { // Rentre dans la méthode par l'action de semaille, ou la suite de Labourage/Semailles			int	Champlibre = 0;			for (int i = 1; i < 6; i++) {				for (int j = 1; j < 4; j++) {					if (Plateau[i][j] == 4) {						Champlibre = Champlibre +1;}}}			int tCereale = PReD.GetRessource(5);			int tLegume = PReD.GetRessource(6);		    if (tCereale ==0 || tLegume ==0) {			System.out.println("PJoD : Selectionnez Cereale ou Legume dans le panneau de ressources");			TexteAide = "Cliquez sur Cereale ou Legume, puis sur un champ labouré.";			Ai.nouveau(TexteAide);			if (Champlibre != 0) {				 verrou = true;    			     PReD.PJoD = this;			     PReD.SetAttente(2);			}			else			{				System.out.println("Pas de champ vide disponible");				TexteAide = "Pas de champ vide disponible";				Ai.nouveau(TexteAide);				PJeD.verrou = false;				if (Cas == 1){				PJeD.PlateauPion[PJeD.x][PJeD.y] = false;				PJeD.nouveau();				PJ.AddPionTour();					nouveau();}			}		}		else 		{ 	// remettre un pion au joueur, afficher les plateaux avec le pion remis				System.out.println("Il vous faut une cereale ou un legume !");				TexteAide = "Il vous faut une cereale ou un legume !";				Ai.nouveau(TexteAide);				PJeD.verrou = false;				if (Cas == 1){				PJeD.PlateauPion[PJeD.x][PJeD.y] = false;				PJeD.nouveau();				PJ.AddPionTour();					nouveau();				}		}     }	}		    	public void Semailles_1(boolean c[]){		PlateauClicRe = c;		boolean Plantation = true;	// mettre un switch / case, le défault permet de gérer les autre clics	System.out.println("Clic 5"+PlateauClicRe[5]+PlateauClicRe[6]);	if (PlateauClicRe[5]==true){		int tCereale = PReD.GetRessource(5);			if (tCereale == 0) {System.out.println("Pas assez de cereales");		TexteAide = "Pas assez de cereales.";		Ai.nouveau(TexteAide);		Plantation = false;}	}	if (PlateauClicRe[6]==true){		int tLegume = PReD.GetRessource(6);		if (tLegume ==0) {System.out.println("Pas assez de legumes");		TexteAide = "Pas assez de legumes.";		Ai.nouveau(TexteAide);		Plantation = false;}	}	 if (Plantation == true){attente = 4; } 		else {		verrou = false;		attente = 0;		PReD.SetAttente(0);		PJeD.verrou = false;		System.out.println("PJoD : pas assez de ressource pour planter, faite une autre action");		PJeD.PlateauPion[PJeD.x][PJeD.y] = false;		PJeD.nouveau();		PJ.AddPionTour();			nouveau();	} 	}		public void Semailles_2() {		for (int i = 1; i < 6; i++) {		for (int j = 1; j < 4; j++) {			if (PlateauClic[i][j] == true) {				if (PlateauClicRe[5]==true) {Plateau[i][j] = 6;											 PReD.RemoveRessource(5, 1); // cereale											 PReD.nouveau();}				if (PlateauClicRe[6]==true) {Plateau[i][j] = 9;											 PReD.RemoveRessource(6, 1); //legume											 PReD.nouveau();}			    nouveau();			}}	}	System.out.println("PJoD : Suite de Semailles");	attente = 0;	verrou = false; 	PJeD.verrou = false;	NouveauCoup(PJeD);}			//Methodes de cloturespublic void Clotures(int c){ 	int Cas = c;	if (verrou == false || c==2) { //Entree dans la methode si aucun coup en cours, ou si provient de la methode Renovation puis Semailles	 int	Caselibre = 0;    	for (int i = 1; i < 6; i++) {		for (int j = 1; j < 4; j++) {			if (Plateau[i][j] == 0) {				Caselibre = Caselibre +1;}}}	int tBois = PReD.GetRessource(1);	if (tBois >3) { 		System.out.println("PJoD : Vous avez 4 bois, ce qui est suffisant");		TexteAide = "Vous avez 4 bois, ce qui est suffisant";		Ai.nouveau(TexteAide);		if (Caselibre != 0) {			System.out.println("PJoD : Vous avez un emplacement disponible");			TexteAide = "Vous avez un emplacement disponible";			Ai.nouveau(TexteAide);			verrou = true;    			attente = 3;		} 		else		{		System.out.println("Pas de case disponible");		TexteAide = "Pas de case disponible";		Ai.nouveau(TexteAide);		PJeD.verrou = false;			if (Cas == 1){				PJeD.PlateauPion[PJeD.x][PJeD.y] = false;				PJeD.nouveau();				PJ.AddPionTour();					nouveau();				}		}	}	else 	{ 	System.out.println("Il vous faut 4 de bois !");	TexteAide = "Il vous faut plus de bois !";	Ai.nouveau(TexteAide);	PJeD.verrou = false;		if (Cas == 1){			PJeD.PlateauPion[PJeD.x][PJeD.y] = false;			PJeD.nouveau();			PJ.AddPionTour();				nouveau();		}	}   }}		public void cloturessuite(){ 	for (int i = 1; i < 6; i++) {		for (int j = 1; j < 4; j++) {			if (PlateauClic[i][j] == true) { 				Plateau[i][j] = 5;				// Si la case voisine est un champ ou un paturage occupé, le champ coute moins cher				int CoutEnBoisDuPaturage = 4;				if (i!=1 && i!=5){				if (Plateau[i+1][j]==5 || Plateau[i+1][j]>10){CoutEnBoisDuPaturage=CoutEnBoisDuPaturage-2;} 				if (Plateau[i-1][j]==5 || Plateau[i-1][j]>10){CoutEnBoisDuPaturage=CoutEnBoisDuPaturage-2;}}				if (j!=1 && j!=3){				if (Plateau[i][j+1]==5 || Plateau[i][j+1]>10){CoutEnBoisDuPaturage=CoutEnBoisDuPaturage-2;} 				if (Plateau[i][j-1]==5 || Plateau[i][j-1]>10){CoutEnBoisDuPaturage=CoutEnBoisDuPaturage-2;}}				PReD.RemoveRessource(1, CoutEnBoisDuPaturage); // Bois				PReD.nouveau();				nouveau();			}}}System.out.println("PJoD : Votre cloture est faite, vous pouvez continuer de faire des paturages. Deux clotures cote à cote coutent moins de bois. ");TexteAide = "Votre cloture est faite, vous pouvez continuer de faire des paturages. Deux clotures cote à cote coutent moins de bois.";Ai.nouveau(TexteAide);verrou = false; PJeD.verrou = false;	if (CoupContinu == false){		NouveauCoup(PJeD);		CoupContinu = true;	}}				//Methode de construction d'etablepublic void constructionetable(){// En version ultérieure}		//Methode d'affichage des animauxpublic void import_animaux(int nb, int TypeAnimal){		if (verrou == false) {		CodeAnimal =TypeAnimal;		 int	Paturagelibre = 0;	    	for (int i = 1; i < 6; i++) {			for (int j = 1; j < 4; j++) {				if (Plateau[i][j] == 5) {					Paturagelibre = Paturagelibre +1;}}}	    switch(TypeAnimal){	    case 1 : Animal = "Mouton";	    break;	    case 2 : Animal = "Sanglier";	    break;	    case 3 : Animal = "Boeuf";	    break;	    default : Animal = "Probleme d'initialisation";	    break;			    }		int tAnimal = nb;		if (tAnimal != 0) { 			System.out.println("PJoD : Il y a des "+Animal+"s a receuillir");			TexteAide = "Il y a des "+Animal+"s a recueillir";			Ai.nouveau(TexteAide);	    if (Paturagelibre != 0) {		System.out.println("PJoD : Vous avez un emplacement disponible");		TexteAide = "Vous avez un emplacement disponible";		Ai.nouveau(TexteAide);	     verrou = true;    	     attente = 5;	     } else {System.out.println("Il n'y a pas de paturage disponible");			TexteAide = "Il n'y a pas de paturage disponible";			Ai.nouveau(TexteAide);			PJeD.verrou = false;			PJeD.PlateauPion[PJeD.x][PJeD.y] = false;			PJeD.nouveau();			PJ.AddPionTour();				nouveau();}		}	else { 		System.out.println("Il n'y a pas d'animaux a receuillir");		TexteAide = "Il n'y a pas d'animaux a receuillir";		Ai.nouveau(TexteAide);		PJeD.verrou = false;		PJeD.PlateauPion[PJeD.x][PJeD.y] = false;		PJeD.nouveau();		PJ.AddPionTour();			nouveau();	}	}	}public void import_animaux_2(){ 	for (int i = 1; i < 6; i++) {		for (int j = 1; j < 4; j++) {			if (PlateauClic[i][j] == true) {				switch(CodeAnimal){				case 1 : 					if (PJeD.Mouton ==1)					{						Plateau[i][j] = 11;						PReD.AddRessource(7, 1);						PJeD.Mouton --;					}					else					{						if (PJeD.Mouton >1) {						Plateau[i][j] = 12;						PReD.AddRessource(7, 2);						PJeD.Mouton = PJeD.Mouton-2;}					}					break;				case 2 :					if (PJeD.Sanglier ==1)					{						Plateau[i][j] = 13;						PReD.AddRessource(8, 1);						PJeD.Sanglier --;					}					else					{						if (PJeD.Sanglier >1) {						Plateau[i][j] = 14;						PReD.AddRessource(8, 2);						PJeD.Sanglier = PJeD.Sanglier-2;}					}					break;				case 3 :					if (PJeD.Boeuf ==1)					{						Plateau[i][j] = 15;						PReD.AddRessource(9, 1);						PJeD.Boeuf --;					}					else					{						if (PJeD.Boeuf >1) {						Plateau[i][j] = 16;						PReD.AddRessource(9, 2);						PJeD.Boeuf = PJeD.Boeuf-2;}					}					break;				}										PReD.nouveau();				nouveau();					PJeD.nouveau();			}	}}System.out.println("PJoD : Vous avez recupere des "+Animal+"s !");TexteAide = "Vous avez recupere des "+Animal+"s !";Ai.nouveau(TexteAide);verrou = false; PJeD.verrou = false;if (CoupContinu == false){	NouveauCoup(PJeD);	CoupContinu = true;}}				//Methode de construction des pieces de la maisonpublic void Renovations(int a, int b, int c){		int Cas = c;	int x = a; 	int y = b; // Les coordonnees sont memorisees pour une annulation	if (verrou == false || Cas == 2) {	int	tMaisonARenover = 0;		for (int i = 1; i < 6; i++) {			for (int j = 1; j < 4; j++) {				if (Plateau[i][j] == 1 || Plateau[i][j] == 2) {					tMaisonARenover = tMaisonARenover +1;			}}	}	    if (tMaisonARenover != 0) {	    	System.out.println("PJoD : Cliquez sur l'argile ou la pierre dans le panneau ressources");			TexteAide = "Cliquez sur l'argile ou la pierre dans le panneau ressources";			Ai.nouveau(TexteAide);	    	verrou = true;    	    	PReD.PJoD = this;	    	PReD.SetAttente(3);	    	PJ.RemovePionTour();  	    	nouveau();	    	if (Cas == 2){	    	RenovationCloture = true;	    	}        } 	    else 	    {		    PJ.AddPionTour(); 	        nouveau();	    	switch (Cas){		    	case 1 : System.out.println("Pas de maison a renover, choisissez une autre action");			TexteAide = "Pas de maison a renover, choisissez une autre action";			Ai.nouveau(TexteAide);	    	break;	    	case 2 : System.out.println("Pas de maison a renover, fin de renovations et clotures");			TexteAide = "Pas de maison a renover, fin de renovations et clotures";			Ai.nouveau(TexteAide);	    	break;	    	}	    }	    }	}	public void Renovations_1(boolean c[]){	// Il faut verifier s'il y'a assez de ressources pour faire la maisonPlateauClicRe = c;	boolean renovation = true;int tRoseau = PReD.GetRessource(3);	if (tRoseau <2) {System.out.println("Pas assez de roseaux : "+tRoseau);TexteAide = "Pas assez de roseaux : "+tRoseau;Ai.nouveau(TexteAide);}// mettre un switch / case, le défault permet de gérer les autre clicsif (PlateauClicRe[2]==true){	int tArgile = PReD.GetRessource(2);	if (tArgile <2) {System.out.println("Pas assez d'argile");	TexteAide = "Pas assez d'argile";	Ai.nouveau(TexteAide);	renovation = false;}}if (PlateauClicRe[3]==true){	int tPierre = PReD.GetRessource(4);	if (tPierre <2) {System.out.println("Pas assez de pierre");	TexteAide = "Pas assez de pierre";	Ai.nouveau(TexteAide);	renovation = false;}} if (renovation == true){attente = 6; } 	else {	// Pas assez de ressource, on rend le pion au joueur	verrou = false;	attente = 0;	PReD.SetAttente(0); 	PJeD.PlateauPion[PJeD.x][PJeD.y] = false;	PJeD.verrou = false;	PJeD.nouveau();	PJ.AddPionTour();		nouveau();} }				public void Renovations_2() {		for (int i = 1; i < 6; i++) {		for (int j = 1; j < 4; j++) {			if (PlateauClic[i][j] == true && Plateau[i][j]== 1 && PlateauClicRe[2]==true) {				 Plateau[i][j] = 2;				 PReD.RemoveRessource(2, 1);				 PReD.RemoveRessource(3, 1);				 PReD.nouveau();}								 			if (PlateauClic[i][j] == true && Plateau[i][j]== 1 && PlateauClicRe[4]==true) {				 Plateau[i][j] = 3; // La pierre est le quatrieme champ de PlateauRessources				 PReD.RemoveRessource(4, 1);				 PReD.RemoveRessource(3, 1);				 PReD.nouveau();}				verrou = false;			PJeD.verrou = false;			nouveau();									if (RenovationCloture == true){			  	RenovationCloture = false;			   	Clotures(2);			}			else 			{				if (CoupContinu == false){					NouveauCoup(PJeD);					CoupContinu = true;				}			}		}	}}		//Methode de Naissancepublic void Naissance(int x, int y, int c) {  	if (verrou == false) {		int	MaisonLibre = 0;		for (int i = 1; i < 6; i++) {			for (int j = 1; j < 4; j++) {				if (Plateau[i][j] == 1 || Plateau[i][j] == 2 || Plateau[i][j] == 3) {					MaisonLibre = MaisonLibre +1;			}}}	    if (MaisonLibre > PJ.GetPionTotaux() && c == 1) {  // Si la méthode est appelée par la naissance normale de PJeD			System.out.println("PJoD : Un enfant est ne, il sera actif au prochain tour");  			TexteAide = "Un enfant est ne, il sera actif au prochain tour";			Ai.nouveau(TexteAide);			PJ.AddPionTotaux();			PJeD.verrou = false;			PJeD.nouveau();			nouveau();	     }	    else 	    {		System.out.println("Pas de maison vide disponible, choisissez une autre action");		TexteAide = "Pas de maison vide disponible, choisissez une autre action";		Ai.nouveau(TexteAide);		// Rendre son pion au joueur		PJeD.verrou = false;		PJeD.PlateauPion[x][y] = false;		PJeD.nouveau();		PJ.AddPionTour();			nouveau();		if (c ==2){ // Cas où la méthode est appelée par la Naissance sans piece libre			System.out.println("PJoD : Un enfant est ne sans piece libre, il sera actif au prochain tour"); 			TexteAide = "Un enfant est ne sans piece libre, il sera actif au prochain tour";			Ai.nouveau(TexteAide);			PJ.AddPionTotaux();			PJeD.verrou = false;			PJeD.nouveau();			nouveau();			}	}	}	}	}